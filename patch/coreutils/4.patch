diff -uNr coreutils-9.7/lib/time_rz.c coreutils-9.7.mod/lib/time_rz.c
--- coreutils-9.7/lib/time_rz.c	2025-07-04 23:08:47.004089810 +0800
+++ coreutils-9.7.mod/lib/time_rz.c	2025-07-04 23:07:38.172089806 +0800
@@ -81,22 +81,7 @@
 
 /* Return a newly allocated time zone for NAME, or NULL on failure.
    A null NAME stands for wall clock time (which is like unset TZ).  */
-timezone_t
-tzalloc (char const *name)
-{
-  size_t name_size = name ? strlen (name) + 1 : 0;
-  size_t abbr_size = name_size < ABBR_SIZE_MIN ? ABBR_SIZE_MIN : name_size + 1;
-  timezone_t tz = malloc (FLEXSIZEOF (struct tm_zone, abbrs, abbr_size));
-  if (tz)
-    {
-      tz->next = NULL;
-      tz->tz_is_set = !!name;
-      tz->abbrs[0] = '\0';
-      if (name)
-        extend_abbrs (tz->abbrs, name, name_size);
-    }
-  return tz;
-}
+//tzalloc has allready in libc
 
 /* If HAVE_STRUCT_TM_TM_ZONE, save into TZ any nontrivial time zone
    abbreviation used by TM, and update *TM to contain the saved abbreviation.
@@ -151,17 +136,7 @@
 }
 
 /* Free a time zone.  */
-void
-tzfree (timezone_t tz)
-{
-  if (tz != local_tz)
-    while (tz)
-      {
-        timezone_t next = tz->next;
-        free (tz);
-        tz = next;
-      }
-}
+//The same reason
 
 /* Get and set the TZ environment variable.  These functions can be
    overridden by programs like Emacs that manage their own environment.  */
